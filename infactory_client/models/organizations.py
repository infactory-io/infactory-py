# coding: utf-8

"""
    Find the knowledge in your data

    <h2><img src='/logo.svg' alt='Infactory' height='50'></h2><p><ul><li><a href='/er.svg'>Entity-Relationship Diagram</a></li><li><a href='/er.md'>Documentation</a></li></ul></p>

    The version of the OpenAPI document: 0.5.0
    Contact: support@infactory.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Organizations(BaseModel):
    """
    Represents a organizations record
    """ # noqa: E501
    id: StrictStr
    name: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    created_at: Optional[datetime] = None
    updated_at: Optional[datetime] = None
    platform_id: Optional[StrictStr] = None
    credentials: Optional[List[Credentials]] = None
    infrastructure: Optional[List[Infrastructure]] = None
    platform: Optional[Platform] = None
    teams: Optional[List[Teams]] = None
    users: Optional[List[Users]] = None
    clerk_org_id: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["id", "name", "description", "created_at", "updated_at", "platform_id", "credentials", "infrastructure", "platform", "teams", "users", "clerk_org_id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Organizations from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in credentials (list)
        _items = []
        if self.credentials:
            for _item_credentials in self.credentials:
                if _item_credentials:
                    _items.append(_item_credentials.to_dict())
            _dict['credentials'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in infrastructure (list)
        _items = []
        if self.infrastructure:
            for _item_infrastructure in self.infrastructure:
                if _item_infrastructure:
                    _items.append(_item_infrastructure.to_dict())
            _dict['infrastructure'] = _items
        # override the default output from pydantic by calling `to_dict()` of platform
        if self.platform:
            _dict['platform'] = self.platform.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in teams (list)
        _items = []
        if self.teams:
            for _item_teams in self.teams:
                if _item_teams:
                    _items.append(_item_teams.to_dict())
            _dict['teams'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in users (list)
        _items = []
        if self.users:
            for _item_users in self.users:
                if _item_users:
                    _items.append(_item_users.to_dict())
            _dict['users'] = _items
        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if created_at (nullable) is None
        # and model_fields_set contains the field
        if self.created_at is None and "created_at" in self.model_fields_set:
            _dict['created_at'] = None

        # set to None if updated_at (nullable) is None
        # and model_fields_set contains the field
        if self.updated_at is None and "updated_at" in self.model_fields_set:
            _dict['updated_at'] = None

        # set to None if platform_id (nullable) is None
        # and model_fields_set contains the field
        if self.platform_id is None and "platform_id" in self.model_fields_set:
            _dict['platform_id'] = None

        # set to None if credentials (nullable) is None
        # and model_fields_set contains the field
        if self.credentials is None and "credentials" in self.model_fields_set:
            _dict['credentials'] = None

        # set to None if infrastructure (nullable) is None
        # and model_fields_set contains the field
        if self.infrastructure is None and "infrastructure" in self.model_fields_set:
            _dict['infrastructure'] = None

        # set to None if platform (nullable) is None
        # and model_fields_set contains the field
        if self.platform is None and "platform" in self.model_fields_set:
            _dict['platform'] = None

        # set to None if teams (nullable) is None
        # and model_fields_set contains the field
        if self.teams is None and "teams" in self.model_fields_set:
            _dict['teams'] = None

        # set to None if users (nullable) is None
        # and model_fields_set contains the field
        if self.users is None and "users" in self.model_fields_set:
            _dict['users'] = None

        # set to None if clerk_org_id (nullable) is None
        # and model_fields_set contains the field
        if self.clerk_org_id is None and "clerk_org_id" in self.model_fields_set:
            _dict['clerk_org_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Organizations from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "platform_id": obj.get("platform_id"),
            "credentials": [Credentials.from_dict(_item) for _item in obj["credentials"]] if obj.get("credentials") is not None else None,
            "infrastructure": [Infrastructure.from_dict(_item) for _item in obj["infrastructure"]] if obj.get("infrastructure") is not None else None,
            "platform": Platform.from_dict(obj["platform"]) if obj.get("platform") is not None else None,
            "teams": [Teams.from_dict(_item) for _item in obj["teams"]] if obj.get("teams") is not None else None,
            "users": [Users.from_dict(_item) for _item in obj["users"]] if obj.get("users") is not None else None,
            "clerk_org_id": obj.get("clerk_org_id")
        })
        return _obj

from infactory_client.models.credentials import Credentials
from infactory_client.models.infrastructure import Infrastructure
from infactory_client.models.platform import Platform
from infactory_client.models.teams import Teams
from infactory_client.models.users import Users
# TODO: Rewrite to not use raise_errors
Organizations.model_rebuild(raise_errors=False)

