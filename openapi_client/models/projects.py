# coding: utf-8

"""
    Find the knowledge in your data

    <h2><img src='/logo.svg' alt='Infactory' height='50'></h2><p><ul><li><a href='/er.svg'>Entity-Relationship Diagram</a></li><li><a href='/er.md'>Documentation</a></li></ul></p>

    The version of the OpenAPI document: 0.5.0
    Contact: support@infactory.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Projects(BaseModel):
    """
    This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.     
    """ # noqa: E501
    id: StrictStr
    name: Optional[StrictStr] = None
    team_id: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    created_at: Optional[datetime] = None
    updated_at: Optional[datetime] = None
    deleted_at: Optional[datetime] = None
    datasources: Optional[List[Datasources]] = None
    events: Optional[List[Events]] = None
    teams: Optional[Teams] = None
    tasks: Optional[List[Tasks]] = None
    datalines: Optional[List[Datalines]] = None
    __properties: ClassVar[List[str]] = ["id", "name", "team_id", "description", "created_at", "updated_at", "deleted_at", "datasources", "events", "teams", "tasks", "datalines"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Projects from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in datasources (list)
        _items = []
        if self.datasources:
            for _item_datasources in self.datasources:
                if _item_datasources:
                    _items.append(_item_datasources.to_dict())
            _dict['datasources'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in events (list)
        _items = []
        if self.events:
            for _item_events in self.events:
                if _item_events:
                    _items.append(_item_events.to_dict())
            _dict['events'] = _items
        # override the default output from pydantic by calling `to_dict()` of teams
        if self.teams:
            _dict['teams'] = self.teams.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in tasks (list)
        _items = []
        if self.tasks:
            for _item_tasks in self.tasks:
                if _item_tasks:
                    _items.append(_item_tasks.to_dict())
            _dict['tasks'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in datalines (list)
        _items = []
        if self.datalines:
            for _item_datalines in self.datalines:
                if _item_datalines:
                    _items.append(_item_datalines.to_dict())
            _dict['datalines'] = _items
        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if team_id (nullable) is None
        # and model_fields_set contains the field
        if self.team_id is None and "team_id" in self.model_fields_set:
            _dict['team_id'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if created_at (nullable) is None
        # and model_fields_set contains the field
        if self.created_at is None and "created_at" in self.model_fields_set:
            _dict['created_at'] = None

        # set to None if updated_at (nullable) is None
        # and model_fields_set contains the field
        if self.updated_at is None and "updated_at" in self.model_fields_set:
            _dict['updated_at'] = None

        # set to None if deleted_at (nullable) is None
        # and model_fields_set contains the field
        if self.deleted_at is None and "deleted_at" in self.model_fields_set:
            _dict['deleted_at'] = None

        # set to None if datasources (nullable) is None
        # and model_fields_set contains the field
        if self.datasources is None and "datasources" in self.model_fields_set:
            _dict['datasources'] = None

        # set to None if events (nullable) is None
        # and model_fields_set contains the field
        if self.events is None and "events" in self.model_fields_set:
            _dict['events'] = None

        # set to None if teams (nullable) is None
        # and model_fields_set contains the field
        if self.teams is None and "teams" in self.model_fields_set:
            _dict['teams'] = None

        # set to None if tasks (nullable) is None
        # and model_fields_set contains the field
        if self.tasks is None and "tasks" in self.model_fields_set:
            _dict['tasks'] = None

        # set to None if datalines (nullable) is None
        # and model_fields_set contains the field
        if self.datalines is None and "datalines" in self.model_fields_set:
            _dict['datalines'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Projects from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "team_id": obj.get("team_id"),
            "description": obj.get("description"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "deleted_at": obj.get("deleted_at"),
            "datasources": [Datasources.from_dict(_item) for _item in obj["datasources"]] if obj.get("datasources") is not None else None,
            "events": [Events.from_dict(_item) for _item in obj["events"]] if obj.get("events") is not None else None,
            "teams": Teams.from_dict(obj["teams"]) if obj.get("teams") is not None else None,
            "tasks": [Tasks.from_dict(_item) for _item in obj["tasks"]] if obj.get("tasks") is not None else None,
            "datalines": [Datalines.from_dict(_item) for _item in obj["datalines"]] if obj.get("datalines") is not None else None
        })
        return _obj

from openapi_client.models.datalines import Datalines
from openapi_client.models.datasources import Datasources
from openapi_client.models.events import Events
from openapi_client.models.tasks import Tasks
from openapi_client.models.teams import Teams
# TODO: Rewrite to not use raise_errors
Projects.model_rebuild(raise_errors=False)

