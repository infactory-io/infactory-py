# coding: utf-8

"""
    Find the knowledge in your data

    <h2><img src='/logo.svg' alt='Infactory' height='50'></h2><p><ul><li><a href='/er.svg'>Entity-Relationship Diagram</a></li><li><a href='/er.md'>Documentation</a></li></ul></p>

    The version of the OpenAPI document: 0.5.0
    Contact: support@infactory.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Teams(BaseModel):
    """
    Represents a teams record
    """ # noqa: E501
    id: StrictStr
    name: Optional[StrictStr] = None
    organization_id: Optional[StrictStr] = None
    created_at: Optional[datetime] = None
    updated_at: Optional[datetime] = None
    credentials: Optional[List[Credentials]] = None
    projects: Optional[List[Projects]] = None
    rbac: Optional[List[Rbac]] = None
    secrets: Optional[List[Secrets]] = None
    organizations: Optional[Organizations] = None
    user_teams: Optional[List[UserTeams]] = None
    __properties: ClassVar[List[str]] = ["id", "name", "organization_id", "created_at", "updated_at", "credentials", "projects", "rbac", "secrets", "organizations", "user_teams"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Teams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in credentials (list)
        _items = []
        if self.credentials:
            for _item_credentials in self.credentials:
                if _item_credentials:
                    _items.append(_item_credentials.to_dict())
            _dict['credentials'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in projects (list)
        _items = []
        if self.projects:
            for _item_projects in self.projects:
                if _item_projects:
                    _items.append(_item_projects.to_dict())
            _dict['projects'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in rbac (list)
        _items = []
        if self.rbac:
            for _item_rbac in self.rbac:
                if _item_rbac:
                    _items.append(_item_rbac.to_dict())
            _dict['rbac'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in secrets (list)
        _items = []
        if self.secrets:
            for _item_secrets in self.secrets:
                if _item_secrets:
                    _items.append(_item_secrets.to_dict())
            _dict['secrets'] = _items
        # override the default output from pydantic by calling `to_dict()` of organizations
        if self.organizations:
            _dict['organizations'] = self.organizations.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in user_teams (list)
        _items = []
        if self.user_teams:
            for _item_user_teams in self.user_teams:
                if _item_user_teams:
                    _items.append(_item_user_teams.to_dict())
            _dict['user_teams'] = _items
        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if organization_id (nullable) is None
        # and model_fields_set contains the field
        if self.organization_id is None and "organization_id" in self.model_fields_set:
            _dict['organization_id'] = None

        # set to None if created_at (nullable) is None
        # and model_fields_set contains the field
        if self.created_at is None and "created_at" in self.model_fields_set:
            _dict['created_at'] = None

        # set to None if updated_at (nullable) is None
        # and model_fields_set contains the field
        if self.updated_at is None and "updated_at" in self.model_fields_set:
            _dict['updated_at'] = None

        # set to None if credentials (nullable) is None
        # and model_fields_set contains the field
        if self.credentials is None and "credentials" in self.model_fields_set:
            _dict['credentials'] = None

        # set to None if projects (nullable) is None
        # and model_fields_set contains the field
        if self.projects is None and "projects" in self.model_fields_set:
            _dict['projects'] = None

        # set to None if rbac (nullable) is None
        # and model_fields_set contains the field
        if self.rbac is None and "rbac" in self.model_fields_set:
            _dict['rbac'] = None

        # set to None if secrets (nullable) is None
        # and model_fields_set contains the field
        if self.secrets is None and "secrets" in self.model_fields_set:
            _dict['secrets'] = None

        # set to None if organizations (nullable) is None
        # and model_fields_set contains the field
        if self.organizations is None and "organizations" in self.model_fields_set:
            _dict['organizations'] = None

        # set to None if user_teams (nullable) is None
        # and model_fields_set contains the field
        if self.user_teams is None and "user_teams" in self.model_fields_set:
            _dict['user_teams'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Teams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "organization_id": obj.get("organization_id"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "credentials": [Credentials.from_dict(_item) for _item in obj["credentials"]] if obj.get("credentials") is not None else None,
            "projects": [Projects.from_dict(_item) for _item in obj["projects"]] if obj.get("projects") is not None else None,
            "rbac": [Rbac.from_dict(_item) for _item in obj["rbac"]] if obj.get("rbac") is not None else None,
            "secrets": [Secrets.from_dict(_item) for _item in obj["secrets"]] if obj.get("secrets") is not None else None,
            "organizations": Organizations.from_dict(obj["organizations"]) if obj.get("organizations") is not None else None,
            "user_teams": [UserTeams.from_dict(_item) for _item in obj["user_teams"]] if obj.get("user_teams") is not None else None
        })
        return _obj

from openapi_client.models.credentials import Credentials
from openapi_client.models.organizations import Organizations
from openapi_client.models.projects import Projects
from openapi_client.models.rbac import Rbac
from openapi_client.models.secrets import Secrets
from openapi_client.models.user_teams import UserTeams
# TODO: Rewrite to not use raise_errors
Teams.model_rebuild(raise_errors=False)

